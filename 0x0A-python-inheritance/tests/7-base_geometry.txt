The ``7-base_geometry`` module
==============================

Using ``BaseGeometry''
----------------------

This file is in reStructured Format.

First import ``BaseGeometry`` from ``7-base_geometry`` module:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:
	>>> b = BaseGeometry()
	>>> try:
	... 	b.integer_validator("side", "12")
	... except Exception as e:
	...	print(e)
	side must be an integer

Test to see if it raises exception with 0
	>>> b = BaseGeometry()
	>>> try:
	... 	b.integer_validator("x", 0)	
	... except Exception as e:
	...	print(e)
	x must be greater than 0

It should raise exception if value is less than 0
	>>> b = BaseGeometry()
	>>> try:
	...	b.integer_validator("length", -56)
	... except Exception as e:
	...	print(e)
	length must be greater than 0

It should not raise exception if value is integer
	>>> b = BaseGeometry()
	>>> b.integer_validator("y", 12)
	>>> b.integer_validator("z", 20)

Test area
	>>> b = BaseGeometry()
	>>> try:
	...	b.area()
	... except Exception as e:
	...	print(e)
	area() is not implemented

Test with no arguments
	>>> try:
	...	b.integer_validator()
	... except Exception as e:
	...	print(e)
    	integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test with one argument
	>>> try:
	...	b.integer_validator(2)
	... except Exception as e:
	...	print(e)
	integer_validator() missing 1 required positional argument: 'value'

Test with other types
	>>> def test_types(test=[]):
	... 	for t in test:
	...		try:
	...			b.integer_validator("size", t)
	...		except Exception as e:
	...			print(e)

List of tests
	>>> test = [True, (3,), {"kill": "joy"}, 5.67, {0, 1}, None]
	>>> test_types(test)
	size must be an integer
	size must be an integer
	size must be an integer
	size must be an integer
	size must be an integer
	size must be an integer
